import os
import sys
from flask import Flask, flash, request, redirect, url_for, render_template
from werkzeug.utils import secure_filename

# importing my module
currentdir = os.path.dirname(os.path.realpath(__file__))
parentdir = os.path.dirname(currentdir)
sys.path.append(parentdir)
from malware_analysis import malwareanalysis 

# yoinked from https://flask.palletsprojects.com/en/1.1.x/patterns/fileuploads/

# Might need to adjust this cause windows is wacky
UPLOAD_FOLDER = 'uploads\\'
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'exe'}

app = Flask (__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Check for valid extension
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() \
        in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # if user does not select file, browser also 
        # submits an empty part without filename
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            # redirects to analysis page
            return redirect(url_for('analysis',
                filename=filename))

    return render_template('index.html')

@app.route('/analysis')
def analysis():
    file = os.listdir('uploads\\')[0]
    print(file)
    found_strings_in_malware = []

    file_to_analyze = malwareanalysis.AnalyzeMalware(f"uploads\\{file}")
    md5_of_malware = file_to_analyze.get_hash()

    for string in file_to_analyze.search_strings():
        found_strings_in_malware.append(string)
    print (found_strings_in_malware)

    # if len(found_strings_in_malware) is 0:
    #     found_strings_in_malware.append("No strings found!")

    # for some reason there is a race condition where the file list get
    # an index error if you remove the file but only if doing the strings...
    # find a way to have something execute on page close to remove malware
    # os.remove(f'uploads\\{file}')

    return render_template(
        'analysis.html', 
        file=file.strip(), 
        hash=md5_of_malware,
        strings=found_strings_in_malware
        )
    